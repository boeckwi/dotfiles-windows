" try
" gcip         comment in paragraph
" ctrl+p       quick open file in project (fuzzy search)
" <leader>t    run spec
" <leader>pry  break point
" <leader>gw   push
" <leader>ren  rename file

set nocompatible " sollte an oberster Stelle stehen
let mapleader = "\<space>"

"===============================================================================
" vundle plugins
"===============================================================================
filetype off " for vundle
set rtp+=~/vimfiles/bundle/Vundle.vim " set the runtime path to invlude Vundle and initialize
call vundle#rc('$HOME/vimfiles/bundle/')

Plugin 'VundleVim/Vundle.vim'   " let Vundle manage VUndle, required
Plugin 'AndrewRadev/switch.vim' " <leader>s to toggle true/false
Plugin 'tpope/vim-fugitive'     " git :Gstatus
Plugin 'tpope/vim-commentary'   " press <g c c> to comment current line
" Plugin 'vim-ruby/vim-ruby'      " geht wohl nur wenn vim mit ruby funktionality compiliert wurde, testen mit: 'hallo'.<C-x><C-o>
Plugin 'jiangmiao/auto-pairs'   " Autogenerates pairs for {[(
Plugin 'kien/ctrlp.vim'         " ctrl+p  fuzzy search for files in project
Plugin 'scrooloose/nerdtree'    " <leader>f
Plugin 'bling/vim-airline'      " bessere status bar und :help airline-tabline
Plugin 'tpope/vim-endwise'      " automatisches end bei ruby
Plugin 'gabrielelana/vim-markdown'
filetype plugin indent on

"Plugin: switch
nnoremap <leader>s :Switch<cr>

"Plugin: nerdtree
nnoremap <leader>f :NERDTree<CR>
let NERDTreeQuitOnOpen=1

"Plugin: markdown
let g:markdown_enable_spell_checking = 0

"Plugin: airline
let g:airline#extensions#tabline#enabled = 1

"-------------------------------------------------------------------------------
" END VUNDLE PLUGINS
"-------------------------------------------------------------------------------

set encoding=utf-8
if has("win32")
  behave mswin " Windows stuff - set 'selection', 'selectmode', 'mousemodel' and 'keymodel'
  set backup
  set backupdir=%TMP%
  set directory=%TMP%

  " looks ugly in wsl:
  colorscheme solarized
  set cul " highlight cursor line
  set colorcolumn=80
else
  set backup
  set backupdir=~/.tmp
  set directory=~/.tmp
  colorscheme monokai
endif
set updatecount=0 " disable swap files; systems don't crash that often these days
set noswapfile
set noundofile
set number
set relativenumber
set ruler
if has("gui_running")
  set guifont=ubuntu\ mono:h12
  set guioptions -=m  "menu bar
  set guioptions -=T  "toolbar
  set guioptions -=r  "scrollbar
  set guioptions -=L  "left scrollbar if split"
  set lines=50
  set columns=140
endif
set incsearch
set hlsearch
set tabstop=2 " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab " use spaces, not tabs
set smartindent
set ignorecase
set smartcase
set gdefault " have :s///g flag by default on
set showcmd
set laststatus=2
if !exists("g:syntax_on")
  syntax enable
endif
set wildmenu " enable tab completion in command mode
set wildmode=list:longest,full
set list listchars=tab:»·,trail:· " Display extra whitespace
autocmd BufNewFile,BufRead * setlocal formatoptions-=cro " Don't automatically continue comments after newline
set cmdheight=2 " domit nach shell command kein <enter> verlangt wird

" C-V in insert mode
exe 'inoremap <script> <C-V> <C-G>u' . paste#paste_cmd['i']
exe 'vnoremap <script> <C-V> ' . paste#paste_cmd['v']

" CTRL-S for saving, also in Insert mode
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" CTRL-X/C/V
vnoremap <C-X> "+x
vnoremap <C-C> "+y
map <C-V>	"+gP
cmap <C-V> <C-R>+
set guioptions-=a " For CTRL-V to work autoselect must be off.

" CTRL-Q to do what CTRL-V used to do
noremap <C-Q>		<C-V>

" MISC
set clipboard=unnamed " use system clipoard
set backspace=indent,eol,start " backspace and cursor keys wrap to previous/next line
nmap <leader><CR> :nohlsearch<cr>:ccl<cr>" remove search highlights and close quickfix window

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

"SPLITS"
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"NUMBERS"
nnoremap <A-a> <C-a>
nnoremap <A-x> <C-x>

"BUFFERS"
nnoremap <leader>p :bp<CR>
nnoremap <leader>n :bn<CR>
nnoremap <leader>d :bd<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w<cr>



"NODE.JS"
nnoremap <leader>N :w<cr>:!node %<cr>
" nnoremap <leader>m :w<cr>:!mocha %<cr>

"PYTHON"
nnoremap <leader>P :w<cr>:!python %<cr>





"GIT"
nnoremap <leader>gw :!git add . && git commit -m 'WIP' && git push<cr>

"RUBY"
nnoremap <leader>R :w<cr>:!ruby %<cr>
nnoremap <leader>pry orequire 'pry'; binding.pry<esc>



"===============================================================================
" RUBY SPECS
"===============================================================================
function! RunTests(filename)
  " Write the file and run tests for the given filename
  :silent w
  if has("unix")
    exec ":silent !clear"
  endif
  if filereadable("Gemfile")
    exec ":!bundle exec rspec --color " . a:filename
  else
    exec ":!rspec --color " . a:filename
  end
endfunction

function! SetTestFile()
  " set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " run the tests for the previously-marked file.
  let in_test_file = match(expand("%"), '\(.feature\|_spec.rb\|_test.rb\)$') != -1
  if in_test_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number . " -b")
endfunction

" run test runner
map <leader>t :call RunTestFile()<cr>
map <leader>T :call RunNearestTest()<cr>
"===============================================================================
" END RUBY SPECS
"===============================================================================


"===============================================================================
" RENAME CURRENT FILE (thanks Gary Bernhardt)
"===============================================================================
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <Leader>ren :call RenameFile()<cr>
