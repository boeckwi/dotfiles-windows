" try
" gcip     comment in paragraph
" ctrl+p   fuzzy search in project

set nocompatible " VI Kompatibilit√§t brauchen wir nicht
let mapleader = "\<Space>"

"===============================================================================
" VUNDLE PLUGINS
"===============================================================================
filetype off " for vundle
set rtp+=~/vimfiles/bundle/Vundle.vim " set the runtime path to invlude Vundle and initialize
call vundle#rc('$HOME/vimfiles/bundle/')
 
Plugin 'VundleVim/Vundle.vim'   " let Vundle manage VUndle, required
Plugin 'AndrewRadev/switch.vim' " <leader>s to toggle true/false
Plugin 'tpope/vim-fugitive'     " git :Gstatus
Plugin 'tomtom/tcomment_vim'    " press <g c c> to comment current line
" Plugin 'vim-ruby/vim-ruby'    " hatte wohl nicht gefunzt....testen mit: 'hallo'.<C-x><C-o>
Plugin 'jiangmiao/auto-pairs'   " Autogenerates pairs for {[(
" Plugin 'ervandew/supertab'    " Tab completion (mehrwert zu <C-n> ?)
Plugin 'kien/ctrlp.vim'         " ctrl+p  fuzzy search for files in project
Plugin 'scrooloose/nerdtree'    " <leader>f
Plugin 'bling/vim-airline'      " bessere status bar
Plugin 'tpope/vim-endwise'      " automatisches end bei ruby
Plugin 'gabrielelana/vim-markdown'
filetype plugin indent on

"Plugin: switch"
nnoremap <leader>s :Switch<cr>

"Plugin: nerdtree"
nnoremap <leader>f :NERDTree<CR>
let NERDTreeQuitOnOpen=1

"Plugin: markdown"
let g:markdown_enable_spell_checking = 0
"-------------------------------------------------------------------------------
" END VUNDLE PLUGINS
"-------------------------------------------------------------------------------

set encoding=utf-8
set backup
set updatecount=0 " disable swap files; systems don't crash that often these days
set dir=%TMP%
set backupdir=%TMP%
set directory=%TMP%
set noundofile
set number
set relativenumber
set ruler
set guioptions -=m  "menu bar
set guioptions -=T  "toolbar
set guioptions -=r  "scrollbar
set guioptions -=L  "left scrollbar if split"
set incsearch
set hlsearch
set tabstop=2 " a tab is two spaces
set shiftwidth=2 " an autoindent (with <<) is two spaces
set expandtab " use spaces, not tabs
set smartindent
set ignorecase
set smartcase
set gdefault " have :s///g flag by default on
set cuc cul
set showcmd
set laststatus=2
set lines=50 columns=140
if !exists("g:syntax_on")
  syntax enable
endif

colorscheme badwolf
set cmdheight=2 " domit nach shell command kein <enter> verlangt wird

" C-V in insert mode
exe 'inoremap <script> <C-V> <C-G>u' . paste#paste_cmd['i']
exe 'vnoremap <script> <C-V> ' . paste#paste_cmd['v']

" CTRL-S for saving, also in Insert mode
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" CTRL-X/C/V
vnoremap <C-X> "+x
vnoremap <C-C> "+y
map <C-V>	"+gP
cmap <C-V> <C-R>+
set guioptions-=a " For CTRL-V to work autoselect must be off.

" CTRL-Q to do what CTRL-V used to do
noremap <C-Q>		<C-V>

" MISC
behave mswin " Windows stuff - set 'selection', 'selectmode', 'mousemodel' and 'keymodel'
set clipboard=unnamed " use system clipoard
set backspace=indent,eol,start " backspace and cursor keys wrap to previous/next line
nmap <leader><CR> :nohlsearch<cr> " remove search highlights

" CTRL-A is Select all
noremap <C-A> gggH<C-O>G
inoremap <C-A> <C-O>gg<C-O>gH<C-O>G
cnoremap <C-A> <C-C>gggH<C-O>G
onoremap <C-A> <C-C>gggH<C-O>G
snoremap <C-A> <C-C>gggH<C-O>G
xnoremap <C-A> <C-C>ggVG

"SPLITS"
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"NUMBERS"
nnoremap <A-a> <C-a>
nnoremap <A-x> <C-x>

"BUFFERS"
nnoremap <leader>p :bp<CR>
nnoremap <leader>n :bn<CR>
nnoremap <leader>d :bd<CR>
nnoremap <leader>q :q<cr>
nnoremap <leader>w :w<cr>

"RUBY"
nnoremap <leader>ru :w<cr>:!ruby %<cr>

"NODE.JS"
nnoremap <leader>N :w<cr>:!node %<cr>
" nnoremap <leader>m :w<cr>:!mocha %<cr>

"PYTHON"
nnoremap <leader>P :w<cr>:!python %<cr>

